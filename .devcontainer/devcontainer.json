#!/usr/bin/env python3
import numpy as np
import unittest

# Divine Constants
OMNIFICIENT_CODENAME = "SpiritAngelus"
DIVINE_PROTOCOL_VERSION = "3.69.123"
GALACTIC_NETWORK_NODES = 473
ZHA_THIK_ENTROPY_THRESHOLD = 0.0

# ----------------------- Module 1: Distortion Matrix -----------------------
def compute_distortion_matrix(R, T0):
    """
    Compute the distortion matrix D = R * conjugate(T0).
    R: Reflection matrix (np.ndarray of complex numbers)
    T0: Ideal transmission matrix (np.ndarray)
    """
    return R * np.conj(T0)

def svd_correction(D, k):
    """
    Apply singular value decomposition (SVD) to matrix D and retain the top-k components.
    
    Parameters:
      D : np.ndarray
          The distortion matrix.
      k : int
          Number of singular values (and associated vectors) to retain.
    
    Returns:
      signal_subspace : np.ndarray (same shape as D)
          Reconstructed matrix using the top-k singular values.
    """
    U, S, Vh = np.linalg.svd(D, full_matrices=False)
    signal_subspace = U[:, :k] @ np.diag(S[:k]) @ Vh[:k, :]
    return signal_subspace

# ----------------------- Module 2: Cognitive Bias Analysis -----------------------
def compute_cognitive_bias_matrix(belief_matrix, ideal_beliefs):
    """
    Compute the cognitive bias matrix by performing an element-wise product:
    bias_matrix = belief_matrix * conjugate(ideal_beliefs)
    """
    return belief_matrix * np.conj(ideal_beliefs)

def extract_unbiased_core(bias_matrix, k):
    """
    Extract the core (unbiased components) of a cognitive bias matrix using SVD.
    
    Parameters:
      bias_matrix : np.ndarray
          The measured belief system (possibly distorted).
      k : int
          Number of singular components to extract.
    
    Returns:
      core_truth : np.ndarray
          The reconstructed unbiased core.
    """
    U, S, Vh = np.linalg.svd(bias_matrix, full_matrices=False)
    core_truth = U[:, :k] @ np.diag(S[:k]) @ Vh[:k, :]
    return core_truth

# ----------------------- Module 3: Neurofeedback Training -----------------------
def simulate_neurofeedback(initial_params, learning_rate=0.05, iterations=50):
    """
    Simulate a neurofeedback training process using gradient descent on a synthetic loss function.
    
    Parameters:
      initial_params : np.ndarray
          Initial state parameters representing a consciousness state.
      learning_rate : float
          Step size for updating parameters.
      iterations : int
          Number of iterations in the training loop.
          
    Returns:
      history : list of floats
          The loss values across iterations.
      final_params : np.ndarray
          The adjusted parameter vector after training.
    """
    def loss_function(params):
        # Using a simple quadratic loss: sum(params^2)
        return np.sum(params**2)
    
    params = initial_params.copy()
    history = []
    
    for i in range(iterations):
        loss = loss_function(params)
        history.append(loss)
        gradient = 2 * params  # For quadratic loss, gradient = 2 * params
        params -= learning_rate * gradient
        
    return history, params

# ----------------------- Module 4: Mindfulness Tracking -----------------------
def track_mindfulness(duration=60, frequency=1):
    """
    Simulate mindfulness tracking over a given duration.
    
    Parameters:
      duration : int
          Total time (in seconds) of tracking.
      frequency : int
          Samples per second.
          
    Returns:
      metrics : dict
          Summary statistics (mean, std, min, max) of the simulated mindfulness state.
    """
    np.random.seed(789)
    samples = np.random.normal(loc=0.8, scale=0.05, size=duration * frequency)
    metrics = {
        'mean_state': float(np.mean(samples)),
        'std_dev': float(np.std(samples)),
        'min_state': float(np.min(samples)),
        'max_state': float(np.max(samples))
    }
    return metrics

# ----------------------- Main Orchestration Function -----------------------
def run_spirit_angelus():
    print("=== UNIFIED SPIRIT ANGELUS CODEBASE ===")
    print("Codename:", OMNIFICIENT_CODENAME)
    print("Version:", DIVINE_PROTOCOL_VERSION)
    print("Galactic Nodes:", GALACTIC_NETWORK_NODES)
    print("Zha'Thik Entropy Threshold:", ZHA_THIK_ENTROPY_THRESHOLD)
    print("--------------------------------------------\n")
    
    # Step 1: Distortion Matrix Correction
    print("Step 1: Correcting optical distortions …")
    np.random.seed(42)
    R = np.random.random((100, 100)) + 1j * np.random.random((100, 100))
    T0 = np.ones((100, 100))
    D = compute_distortion_matrix(R, T0)
    corrected = svd_correction(D, k=10)
    print(" - Corrected distortion matrix shape:", corrected.shape)
    
    # Step 2: Cognitive Bias Analysis
    print("Step 2: Analyzing cognitive bias …")
    np.random.seed(123)
    belief_matrix = np.random.random((50, 50)) + 1j * np.random.random((50, 50))
    ideal_beliefs = np.ones((50, 50))
    bias_matrix = compute_cognitive_bias_matrix(belief_matrix, ideal_beliefs)
    core_truth = extract_unbiased_core(bias_matrix, k=5)
    print(" - Unbiased core extracted with shape:", core_truth.shape)
    
    # Step 3: Neurofeedback Training
    print("Step 3: Executing neurofeedback training …")
    np.random.seed(456)
    initial_params = np.random.randn(10)
    history, final_params = simulate_neurofeedback(initial_params, learning_rate=0.1, iterations=100)
    print(" - Final neurofeedback parameters:", final_params)
    
    # Step 4: Mindfulness Tracking
    print("Step 4: Tracking mindfulness metrics …")
    metrics = track_mindfulness(duration=60, frequency=1)
    print(" - Mindfulness metrics:", metrics)
    
    print("\n=== SPIRIT ANGELUS ACTIVATION COMPLETE ===")

# ----------------------- Unittest Cases -----------------------
class TestSpiritAngelus(unittest.TestCase):
    def test_distortion_matrix(self):
        R = np.array([[1+1j, 2+2j], [3+3j, 4+4j]])
        T0 = np.array([[1, 1], [1, 1]])
        D = compute_distortion_matrix(R, T0)
        self.assertTrue(np.allclose(D, R * np.conj(T0)))
    
    def test_svd_correction(self):
        D = np.random.random((10, 10)) + 1j * np.random.random((10, 10))
        corrected = svd_correction(D, k=3)
        self.assertEqual(corrected.shape, (10, 10))
    
    def test_cognitive_bias(self):
        belief_matrix = np.array([[1+0j, 2+0j], [3+0j, 4+0j]])
        ideal_beliefs = np.ones((2, 2))
        bias_matrix = compute_cognitive_bias_matrix(belief_matrix, ideal_beliefs)
        self.assertTrue(np.allclose(bias_matrix, belief_matrix))
    
    def test_extract_unbiased_core(self):
        bias_matrix = np.random.random((10, 10)) + 1j * np.random.random((10, 10))
        core = extract_unbiased_core(bias_matrix, k=4)
        self.assertEqual(core.shape, (10, 10))
    
    def test_neurofeedback(self):
        initial_params = np.array([1.0, -1.0, 0.5])
        history, final_params = simulate_neurofeedback(initial_params, learning_rate=0.1, iterations=10)
        self.assertLess(history[-1], history[0])
    
    def test_mindfulness(self):
        metrics = track_mindfulness(duration=10, frequency=1)
        self.assertTrue(0.7 < metrics['mean_state'] < 0.9)

# ----------------------- Entry Point -----------------------
if __name__ == "__main__":
    # Run the main activation sequence.
    run_spirit_angelus()
    
    # Run unittests to validate functionality.
    print("\nRunning Unit Tests...\n")
    unittest.main(argv=[''], exit=False)
